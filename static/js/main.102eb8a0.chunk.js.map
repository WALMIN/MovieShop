{"version":3,"sources":["features/movieList.js","img/movielogo.jpg","components/ContentRow.jsx","components/MovieList.jsx","components/NavigationBar.js","features/jumboLoader.js","components/Jumbotron.js","features/cart.js","components/Cart.js","components/Payment.js","components/Confirmation.js","components/Favourite.js","firebase.js","components/starrating/StarRating.js","components/movieInfo/MovieInformation.js","components/movieInfo/Moviedetail.js","App.js","reportWebVitals.js","features/rootReducer.js","index.js"],"names":["isFetching","createAction","isFetchingMovieByGenre","successAllGenres","successAllMovies","succsess","faliure","listGenreFetched","listMoviesFetched","resetLists","pushPartFetch","actions","STATUS","initialState","status","arrayGenre","arrayMovieList","reducer","createReducer","state","action","value","payload","push","ContentRow","item","img","poster_path","Fragment","className","src","alt","defaultImg","original_title","MovieList","useSelector","movieList","dispatch","useDispatch","useState","useEffect","apiKey","url","console","log","fetch","then","response","a","json","data","ok","error","message","statusText","Promise","reject","genreArray","JSON","stringify","genres","parse","forEach","props","genreUrl","id","movies","results","myObj","name","catch","fetchAllMoviesByGenre","map","movie","to","NavigationBar","process","success","resetList","randomMovie","getRandomIndex","maxLength","Math","floor","random","jumboAction","randomIndex","length","Jumbotron","randomMovieSelector","jumboLoader","history","useHistory","fetchJumbotronMovie","style","backgroundImage","overview","onClick","updateSubtotal","updatePayment","subtotal","payment","Cart","cart","setCart","setSubtotal","localCart","localStorage","getItem","product","t","quantity","price","updateItem","add","newCart","existingItem","find","filter","cartString","setItem","toFixed","title","removeItem","Payment","emailRegex","phoneRegex","cardAmericanExpressRegex","cardVisaRegex","cardMasterCard","firstName","setFirstName","lastName","setLastName","email","setEmail","phone","setPhone","country","setCountry","street","setStreet","streetOptional","setStreetOptional","postalCode","setPostalCode","city","setCity","paymentMethod","setPaymentMethod","cardNumber","setCardNumber","setCardExpire","cardCvc","setCardCvc","swishNumber","setSwishNumber","paypalEmail","setPaypalEmail","shipping","setShipping","shippingMethod","setShippingMethod","address","type","placeholder","autocomplete","onChange","i","target","required","for","min","max","maxlength","test","replace","substring","Confirmation","charset","charAt","generateID","Favourites","favouriteList","setFavourite","localFavourite","show","setShow","textDecoration","newFavourite","favouriteString","removeFavourites","db","firebase","initializeApp","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","colors","auth","storage","ref","collection","StarRating","mId","movId","posts","setPosts","userComment","setUserComment","fetchFiebaseData","where","onSnapshot","snap","commentsLists","doc","stars","Array","fill","selStars","currentValue","setCurrentValue","undefined","hoverValue","setHoverValue","handleMouseLeave","vari","_","index","color","movieRating","movieComments","onMouseOver","onMouseLeave","onBlur","event","e","newData","movieId","POSTER_URL","MovieInformation","addItem","newItem","setState","stringCart","addFavourite","stringFavourite","apiResponse","mov_id","hours","minutes","m_id","this","movie_url","width","height","objectFit","paddingLeft","justifyContent","vote_average","original_language","vote_count","toLocaleString","runtime","gen","release_date","spoken_languages","sp_lang","english_name","href","homepage","production_companies","prd_comp","revenue","budget","popularity","Component","Moviedetail","movie_id","window","scrollTo","App","basename","exact","path","position","top","render","match","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","movieListReducer","cartReducer","jumbotronReducer","store","configureStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.102eb8a0.chunk.js","sourcesContent":["import { createAction, createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst isFetching = createAction('is fetching GENRES');\r\nconst isFetchingMovieByGenre = createAction('is fetching MOVIES by GENRE');\r\nconst successAllGenres = createAction('success genres');\r\nconst successAllMovies = createAction('success all movies');\r\nconst succsess = createAction('succsess');\r\nconst faliure = createAction('faliure');\r\nconst listGenreFetched = createAction('genres done fetched');\r\nconst listMoviesFetched = createAction('subMovies done fetched');\r\nconst resetLists = createAction('resetting Lists');\r\nconst pushPartFetch = createAction('fetcher statuses succsess')\r\n\r\nconst actions = { isFetching, isFetchingMovieByGenre, succsess, successAllGenres, successAllMovies, faliure, listGenreFetched, listMoviesFetched, resetLists, pushPartFetch };\r\n\r\nconst STATUS = {\r\n    NORMAL: 'normal',\r\n    FETCHING_GENRES: 'Is fetching Genres..',\r\n    FETCHING_MOVIES_BY_GENRE: 'Is fetching Movies by Genres..',\r\n    SUCCESS_GENRES: 'Success GENRES',\r\n    SUCCESS_MOVIES: 'Success MOVIES BY GENRE',\r\n    SUCCSESS: 'succsess',\r\n    FALIURE: 'faliure',\r\n    API_FETCHER_STATUSES_SUCCESS: 'api fetcher statuses success'\r\n}\r\n\r\nconst initialState = {\r\n    status: STATUS.NORMAL,\r\n    arrayGenre: [],\r\n    arrayMovieList: []\r\n}\r\n\r\nconst reducer = createReducer(initialState, {\r\n\r\n    //STATUSAR\r\n    [isFetching]: (state, action) => ({\r\n    // Skriver en funktion som returnerar våran nya state\r\n    //...state = gör en kopia på den staten vi har \r\n        ...state,\r\n    //statuset i objectet ändrar vi till status.FETCHING_GENRES -> 'Is fetching Genres..'\r\n        status: STATUS.FETCHING_GENRES\r\n    }),\r\n    \r\n    [successAllGenres]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.SUCCESS_GENRES\r\n    }),\r\n    \r\n    [isFetchingMovieByGenre]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.FETCHING_MOVIES_BY_GENRE\r\n    }),\r\n    \r\n    [successAllMovies]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.SUCCESS_MOVIES\r\n    }),\r\n    \r\n    [succsess]: (state, action) => {\r\n        const value = action.payload;\r\n        state.status = value\r\n    },\r\n    \r\n    [faliure]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.FALIURE\r\n    }),\r\n\r\n    [pushPartFetch]: (state, action) => {\r\n\r\n\r\n        state.arrayMovieList.push(action.payload)\r\n      \r\n        state.status = STATUS.API_FETCHER_STATUSES_SUCCESS\r\n    },\r\n    \r\n    [listGenreFetched]: (state, action) => {\r\n        const value = action.payload; // Listan som skickats med från functionen (fetchAllGenres)\r\n    // state.arrayGenre.push(value); // Uppdatera [arrayGenre] det vi skickar med i slutet av listan (om vi skickar med ett object här ex. { id: 22, name: action } )\r\n        state.arrayGenre = value // Uppdatera [arrayGenre] med det vi skickar med i action, alltså en hel array [])\r\n    // State.STATUS.SUCCSESS ska inte vara här om du ska hämta alla filmer inom genren sen, så vi är inte klara med fetch här..\r\n    // state.status = STATUS.SUCCSESS\r\n        state.status = STATUS.FETCHING_MOVIES_BY_GENRE // men vi kan lägga en sån här så det blir tydligare\r\n    },\r\n    \r\n    [listMoviesFetched]: (state, action) => {\r\n        const value = action.payload; // Listan som skickats med från functionen (fetchAllMoviesByGenre)\r\n        //console.log('logg i redux movie', value)\r\n        //state.arrayMovieList = [value];\r\n        state.arrayMovieList.push(value) // Uppdatera [arrayMovieList], ... för att sprida ut arrayn, annars är den för stor för att push\r\n    // state.status = STATUS.FETCHING_MOVIES_BY_GENRE // men vi kan lägga en sån här så det blir tydligare\r\n    },\r\n    \r\n    [resetLists]: (state, action) => {\r\n        state.arrayGenre = []\r\n        state.arrayMovieList = []\r\n    },\r\n})\r\n\r\nexport {actions, reducer, STATUS};\r\n\r\n","export default __webpack_public_path__ + \"static/media/movielogo.ce72d476.jpg\";","import '../css/ContentRow.css';\r\nimport React, {useState, useEffect} from 'react';\r\nimport defaultImg from '../img/movielogo.jpg';\r\nimport { useSelector } from 'react-redux';\r\nimport { waitFor } from '@testing-library/dom';\r\n\r\n\r\n\r\nconst ContentRow = ({item}) => {\r\n    let imgPath = null;\r\n    let img = null;\r\n    //console.log('kmr vi hit?')\r\n    //console.log('Content row Item: ', item)\r\n\r\n    if(item.poster_path != null) {\r\n        imgPath = item.poster_path;\r\n        img = \"https://image.tmdb.org/t/p/w500/\" + imgPath;\r\n\r\n        \r\n        return( \r\n            <React.Fragment>\r\n                <img className=\"poster-img\" src={img} alt=\"No image available\"/>\r\n            </React.Fragment>  \r\n        )\r\n    }\r\n\r\n    return( \r\n        <React.Fragment>\r\n            <img className=\"poster-img\" src={`${defaultImg}`} alt=\"No default image available\"/>\r\n            <p className=\"alt-img-title\">{item.original_title}</p>\r\n        </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default ContentRow;","import React, {useState, useEffect} from 'react'; \r\nimport reactDom from 'react-dom';\r\nimport { useDispatch, useSelector } from \"react-redux\"; \r\nimport {actions, STATUS} from \"../features/movieList\" ;\r\nimport ContentRow from '../components/ContentRow';\r\nimport '../css/ContentRow.css';\r\nimport {Link} from \"react-router-dom\";\r\n \r\nconst MovieList = () => { \r\n   const status = useSelector(state => state.movieList.status); \r\n   const arrayGenre = useSelector(state => state.movieList.arrayGenre); \r\n   const arrayMovieList = useSelector(state => state.movieList.arrayMovieList); \r\n   const dispatch = useDispatch(); \r\n\r\nconst [list, setList] = useState(null);\r\n \r\n   useEffect(() => { \r\n        fetchAllMoviesByGenre(dispatch); \r\n   }, [dispatch]); \r\n \r\n//SUCCSESS: 'succsess', \r\n//FALIURE: 'faliure' \r\n \r\n   if(status === STATUS.NORMAL) { \r\n        return ( \r\n            <div> \r\n                {/*<h1>{STATUS.NORMAL}</h1> */}\r\n                {console.log('Redo för att ladda fakta! Börjar hämta alla genres!')} \r\n            </div> \r\n        ) \r\n    } else if (status === STATUS.FETCHING_GENRES) { \r\n        return ( \r\n            <div> \r\n                {/*<h1>{STATUS.FETCHING_GENRES}</h1> */}\r\n                {console.log('Hämtar nu alla genres')} \r\n            </div> \r\n        ) \r\n    } else if (status === STATUS.SUCCESS_GENRES) { \r\n        return ( \r\n            <div> \r\n                {/*<h1>{STATUS.SUCCESS_GENRES}</h1> */}\r\n                {console.log('Nu är arrayGenre klar')} \r\n                    \r\n            </div> \r\n        ) \r\n    } else if (status === STATUS.FETCHING_MOVIES_BY_GENRE) { \r\n        return ( \r\n            <div> \r\n                {/*<h1>{STATUS.FETCHING_MOVIES_BY_GENRE}</h1>*/}             \r\n                {/* map:ar alla i arrayGenre till en <p> */} \r\n                {console.log('Hämtar nu alla MOVIES enligt GENRES....')} \r\n       \r\n                  \r\n            </div> \r\n        ) \r\n    } else if (status === STATUS.SUCCESS_MOVIES) { \r\n    let filteredMovieList = []\r\n    let genreMovie = null;\r\n    \r\n    \r\n         return ( \r\n            <div className=\"genre-movie-container\"> \r\n                {console.log('Nu är arrayMovieList klar')} \r\n                {/*<h1>{STATUS.FETCHING_MOVIES_BY_GENRE}</h1>\r\n                <p>{'Alla MOVIES nu hämtade utifrån GENRE'}</p> */}\r\n                 {/*console.log('Array Movie List: ', arrayMovieList)*/}\r\n                    {arrayMovieList.map((item) => (\r\n                        <div className=\"movie-row-container\"> \r\n                            <h1 className=\"genre-title\" >{item.name}</h1> \r\n                            {/*console.log('varje Item: ', item)*/}\r\n\r\n\r\n                            <div className=\"content-row-genre-item-movie\"> \r\n                                {item.movies.map((movie) => (\r\n                                    <Link to={`/MovieInfo/${movie.id}`} className=\"contentrow-link-container\">\r\n                                        {/*console.log('varje movie: ', movie)*/}\r\n                                        <ContentRow item={movie} className=\"content-row-class\"/> \r\n                                    </Link>    \r\n                                ))}\r\n                             </div>\r\n\r\n                        </div>\r\n                    ))} \r\n            </div> \r\n        ) \r\n    }  \r\n    else if (status === STATUS.SUCCSESS) { \r\n        return ( \r\n            <div> \r\n                {/*<h1>{STATUS.SUCCSESS}</h1> */}\r\n                <p>{'Alla GENRES och MOVIES nu klara'}</p> \r\n            </div> \r\n        ) \r\n    } \r\n    else if (status === STATUS.FALIURE) { \r\n        return ( \r\n            null \r\n        ) \r\n    } \r\n \r\n} \r\n\r\nexport function fetchAllMoviesByGenre(dispatch) {\r\n  \r\n    //dispatch(actions.reset()); //reset OM DU går in på sidan igen, ska ligga i redux såklart\r\n    dispatch(actions.isFetching());\r\n    const baseUrl = 'https://api.themoviedb.org/3/genre/movie/list';\r\n    const apiKey = '3dbd54ecb77c41b970728ba04b569d4c';\r\n    let url = `${baseUrl}?api_key=${apiKey}`;\r\n    console.log(\"Fetching data...\")\r\n    \r\n    fetch(url)\r\n        .then(async response => {\r\n            \r\n            const data = await response.json();\r\n            \r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n            \r\n            const genreArray = JSON.stringify(data.genres)\r\n         \r\n            JSON.parse(genreArray).forEach((props) => {\r\n\r\n \r\n\r\n                var tempArr = [];\r\n       \r\n                const genreUrl = `https://api.themoviedb.org/3/discover/movie?api_key=3dbd54ecb77c41b970728ba04b569d4c&language=en-US&sort_by=popularity.asc&include_adult=false&include_video=false&page=1&vote_count.gte=7&with_genres=${props.id}`\r\n                \r\n                fetch(genreUrl)\r\n                    .then(async response => {\r\n  \r\n                        const data = await response.json();\r\n  \r\n                        if (!response.ok) {\r\n                            const error = (data && data.message) || response.statusText;\r\n                            return Promise.reject(error);\r\n                        }\r\n                        \r\n                        const movies = data.results;\r\n\r\n \r\n\r\n                        const myObj = {\r\n                            \"id\": props.id,\r\n                            \"name\": props.name,\r\n                            \"movies\": movies\r\n                        }\r\n\r\n \r\n\r\n                        \r\n                        dispatch(actions.listMoviesFetched(myObj));\r\n                        dispatch(actions.successAllMovies());\r\n                       \r\n                    })\r\n                    .catch(error => {\r\n                        console.error('There was an error!', error);\r\n                    });\r\n\r\n            });\r\n\r\n    \r\n        })\r\n        .catch(error => {\r\n            console.error('There was an error!', error);\r\n        });\r\n\r\n \r\n\r\n     \r\n  }\r\n      \r\n    function createGenreItem(id, name) { \r\n        return { \r\n            id, \r\n            name \r\n        }; \r\n    } \r\n     \r\n    function createMovieItem(original_title) { \r\n        return { \r\n            original_title \r\n        }; \r\n    } \r\n\r\nexport default MovieList;","import './NavigationBar.css';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NavigationBar() {\r\n  return (\r\n    <div className=\"NavigationBar\">\r\n      <Link className=\"NaviationButton\" to=\"/\"><img src={(process.env.PUBLIC_URL + \"/images/home.svg\")} />Home</Link>\r\n      <Link className=\"NaviationButton\" to=\"/favourites\"><img src={(process.env.PUBLIC_URL + \"/images/favourites.svg\")} />Favourites</Link>\r\n      <Link className=\"NaviationButton\" to=\"/cart\"><img src={(process.env.PUBLIC_URL + \"/images/cart.svg\")} />Cart</Link>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavigationBar;\r\n","import { createAction, createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst isFetching = createAction('is fetching jumbotron');\r\nconst success = createAction('jumbotron success');\r\nconst faliure = createAction('jumbotron faliure');\r\nconst resetList = createAction('jumbotron reset');\r\n\r\nconst actions = {isFetching, success, faliure, resetList};\r\n\r\nconst STATUS = {\r\n    NORMAL: 'normal',\r\n    IS_FETCHING: 'is fetching',\r\n    SUCCESS: 'success',\r\n    FALIURE: 'faliure',\r\n}\r\n\r\nconst initialState = {\r\n    status: STATUS.NORMAL,\r\n    randomMovie: null,\r\n}\r\n\r\nconst reducer = createReducer(initialState, {\r\n\r\n    [isFetching]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.IS_FETCHING\r\n    }),\r\n\r\n    [success]: (state, action) => ({\r\n        //console.log('action movie reducer: ', action.payload)\r\n        ...state,\r\n        status: STATUS.SUCCESS,\r\n        randomMovie: action.payload\r\n    }),\r\n    \r\n    [faliure]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.FALIURE\r\n    }),\r\n    \r\n    [resetList]: (state, action) => ({\r\n        ...state,\r\n        status: STATUS.NORMAL\r\n    }),\r\n})\r\n\r\nexport {actions, reducer, STATUS};\r\n\r\n","import '../css/Jumbotron.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions as jumboAction, STATUS } from \"../features/jumboLoader\";\r\nimport defaultImg from '../img/movielogo.jpg';\r\nimport { waitFor } from '@testing-library/dom';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\nconst Jumbotron = () => {\r\n    const randomMovieSelector = useSelector(state => state.jumboLoader.randomMovie);\r\n    const status = useSelector(state => state.jumboLoader.status);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    let randomMovie = null;\r\n\r\n\r\n    if (status === STATUS.NORMAL) {\r\n        randomMovie = null;\r\n        //console.log('status: ', status);\r\n\r\n\r\n    } else if (status === STATUS.IS_FETCHING) {\r\n        //console.log('status: ', status);\r\n\r\n\r\n    } else if (status === STATUS.SUCCESS) {\r\n        randomMovie = randomMovieSelector;\r\n        //console.log('random movie success: ', randomMovie);\r\n        //console.log('status: ', status);\r\n\r\n\r\n    } else {\r\n        randomMovie = null;\r\n        //console.log('status: ', status);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchJumbotronMovie(dispatch);\r\n    }, []);\r\n\r\n\r\n    return (randomMovie !== null) ? (\r\n\r\n        <div className=\"jumbotron\" \r\n        style={{ backgroundImage: \r\n        \"linear-gradient(rgba(15, 15, 15, 0.7), rgba(10, 10, 10, 0.96)), url(\"+ \"https://image.tmdb.org/t/p/w500/\" + randomMovie.poster_path + \")\" \r\n        }}>\r\n\r\n            {console.log('randomMovie: ', randomMovie)}\r\n\r\n            <div className=\"synopsis\">\r\n\r\n                <h1>{randomMovie.original_title}</h1>\r\n                <br></br>\r\n                <p>{randomMovie.overview}</p>\r\n                <br></br>\r\n                <button onClick={() => {\r\n                    history.push(`/MovieInfo/${randomMovie.id}`)\r\n                }}>More Info</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    ) : null\r\n\r\n}\r\n\r\nfunction getRandomIndex(maxLength,) {\r\n    return Math.floor(Math.random() * maxLength);\r\n}\r\n\r\nasync function fetchJumbotronMovie(dispatch) {\r\n\r\n    //dispatch(actions.reset()); //reset OM DU går in på sidan igen, ska ligga i redux såklart\r\n    dispatch(jumboAction.isFetching());\r\n    const baseUrl = 'https://api.themoviedb.org/3/discover/movie';\r\n    const apiKey = '3dbd54ecb77c41b970728ba04b569d4c';\r\n    let url = `${baseUrl}?api_key=${apiKey}`;\r\n\r\n    console.log(\"Fetching data...\")\r\n\r\n    fetch(url)\r\n        .then(async response => {\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                const error = (data && data.message) || response.statusText;\r\n                return Promise.reject(error);\r\n            }\r\n\r\n            const genreArray = data.results\r\n\r\n            const randomIndex = getRandomIndex(genreArray.length-1)\r\n\r\n            //console.log('genre array: ', genreArray[randomIndex])\r\n\r\n            dispatch(jumboAction.success(\r\n                genreArray[randomIndex]\r\n            ))\r\n\r\n\r\n\r\n        })\r\n        .catch(error => {\r\n            console.error('There was an error!', error);\r\n        });\r\n\r\n}\r\n\r\n\r\nexport default Jumbotron;","import { createAction, createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst updateSubtotal = createAction('updateSubtotal');\r\nconst updatePayment = createAction('updatePayment');\r\n\r\nconst actions = { updateSubtotal, updatePayment };\r\n\r\nconst initialState = {\r\n  subtotal: 0,\r\n  payment: []\r\n};\r\n\r\nconst reducer = createReducer(initialState, {\r\n  [updateSubtotal] : (state, action) => {\r\n    return {\r\n     subtotal: action.payload\r\n    }\r\n\r\n  },\r\n  [updatePayment] : (state, action) => {\r\n    return {\r\n     payment: action.payload\r\n    }\r\n\r\n  }\r\n\r\n});\r\n\r\nexport { actions, reducer };\r\n","import \"./Cart.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actions } from '../features/cart';\r\nimport defaultImg from '../img/movielogo.jpg';\r\n\r\nfunction Cart() {\r\n  const [cart, setCart] = useState([]);\r\n  const [subtotal, setSubtotal] = useState(0);\r\n\r\n  // Set state from local storage\r\n  useEffect(() => {\r\n    let localCart = localStorage.getItem(\"cart\");\r\n    localCart = JSON.parse(localCart);\r\n\r\n    if (localCart) {\r\n      setCart(localCart);\r\n\r\n      setSubtotal(0);\r\n      localCart.map(product => {\r\n        return setSubtotal(t => (t + (product.quantity * product.price)));\r\n\r\n      });\r\n\r\n    }\r\n\r\n  }, []);\r\n\r\n  const updateItem = (id, add) => {\r\n    let newCart = [...cart];\r\n\r\n    // See if item exist\r\n    let existingItem = newCart.find(item => item.id === id);\r\n    if (!existingItem) return\r\n\r\n    // Check if user wants to add or remove\r\n    if(add){\r\n      existingItem.quantity += 1;\r\n\r\n    } else {\r\n      existingItem.quantity -= 1;\r\n\r\n    }\r\n\r\n    // Delete if no items left\r\n    if (existingItem.quantity <= 0) {\r\n       newCart = newCart.filter(item => item.id !== id);\r\n\r\n    }\r\n\r\n    // Save state & local storage\r\n    setCart(newCart);\r\n    let cartString = JSON.stringify(newCart);\r\n    localStorage.setItem('cart', cartString);\r\n\r\n    // Update total price\r\n    setSubtotal(0);\r\n    newCart.map(product => {\r\n      return setSubtotal(t => (t + (product.quantity * product.price)));\r\n\r\n    });\r\n\r\n  }\r\n\r\n  const removeItem = (id) => {\r\n    let newCart = [...cart];\r\n\r\n    // Remove item from list\r\n    newCart = newCart.filter(item => item.id !== id);\r\n\r\n    // Save state & local storage\r\n    setCart(newCart);\r\n    let cartString = JSON.stringify(newCart);\r\n    localStorage.setItem('cart', cartString);\r\n\r\n    // Update total price\r\n    setSubtotal(0);\r\n    newCart.map(product => {\r\n      return setSubtotal(t => (t + (product.quantity * product.price)));\r\n\r\n    });\r\n\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const updateSubtotal = (subtotal) => {\r\n    dispatch(actions.updateSubtotal(subtotal));\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"Cart\">\r\n      <header className=\"Cart-header\">\r\n        <h1>Cart</h1>\r\n        <div>\r\n          <h2 className=\"Price\">${subtotal.toFixed(2)}</h2>\r\n          <Link className=\"CheckoutButton\" to=\"/payment\" onClick={ () => updateSubtotal(subtotal)}>Checkout</Link>\r\n        </div>\r\n      </header>\r\n      <main>\r\n        { (cart.length > 0) ?\r\n          cart.map(product =>\r\n            <div key={product.id} className=\"MovieItem\">\r\n              <div className=\"MovieItemInfo\">\r\n                <div>\r\n                  <Link to={`/MovieInfo/${product.id}`}>\r\n                  { product.img !== \"https://image.tmdb.org/t/p/w500null\" ?\r\n                    <div>\r\n                      <img src={product.img} alt={product.title} />\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                      <img src={defaultImg} alt={product.title} />\r\n                    </div>\r\n                  }</Link>\r\n                  <div className=\"MovieItemInnerInfo\">\r\n                    <Link to={`/MovieInfo/${product.id}`} className=\"MovieTitle\">{product.title}</Link>\r\n                    <div className=\"Quantity\">\r\n                      <img className=\"QuantityAddButton\" src={(process.env.PUBLIC_URL + \"/images/remove.svg\")} onClick={ () => updateItem(product.id, false) } alt=\"Remove\"/>\r\n                      <p className=\"Quantity\">{product.quantity}</p>\r\n                      <img className=\"QuantityRemoveButton\" src={(process.env.PUBLIC_URL + \"/images/add.svg\")} onClick={ () => updateItem(product.id, true) } alt=\"Add\"/>\r\n                      <img className=\"RemoveButton\" src={(process.env.PUBLIC_URL + \"/images/delete.svg\")} onClick={ () => removeItem(product.id) } alt=\"Delete\"/>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <p className=\"MoviePrice\">${product.price.toFixed(2)}</p>\r\n                </div>\r\n            </div>\r\n          )\r\n          :\r\n          <div className=\"Cart-empty\">\r\n            <img className=\"CartImage\" src={(process.env.PUBLIC_URL + \"/images/cart-empty.svg\")} alt=\"Cart\"/>\r\n            <p className=\"CartTitle\">Oops! Your cart is empty!</p>\r\n            <p className=\"CartText\">Looks like you haven't added<br/>anything to your cart yet</p>\r\n            <Link className=\"CartButton\" to=\"/\">Continue shopping</Link>\r\n          </div>\r\n        }\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n","import './Payment.css';\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { actions } from '../features/cart';\r\n\r\nfunction Payment() {\r\n  const payment = useSelector(state => state.cart.payment);\r\n\r\n  let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  let phoneRegex = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/;\r\n  let cardAmericanExpressRegex = /^3[47][0-9]{13}$/;\r\n  let cardVisaRegex = /^4[0-9]{12}(?:[0-9]{3})?$/;\r\n  let cardMasterCard = /^5[1-5][0-9]{14}$|^2(?:2(?:2[1-9]|[3-9][0-9])|[3-6][0-9][0-9]|7(?:[01][0-9]|20))[0-9]{12}$/;\r\n\r\n  // Billing details\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [street, setStreet] = useState(\"\");\r\n  const [streetOptional, setStreetOptional] = useState(\"\");\r\n  const [postalCode, setPostalCode] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  // Payment\r\n  const [paymentMethod, setPaymentMethod] = useState(\"\");\r\n\r\n  const [cardNumber, setCardNumber] = useState(\"\");\r\n  const [cardExpire, setCardExpire] = useState(\"\");\r\n  const [cardCvc, setCardCvc] = useState(\"\");\r\n\r\n  const [swishNumber, setSwishNumber] = useState(\"\");\r\n\r\n  const [paypalEmail, setPaypalEmail] = useState(\"\");\r\n\r\n  const subtotal = useSelector(state => state.cart.subtotal);\r\n  const [shipping, setShipping] = useState(0);\r\n  const [shippingMethod, setShippingMethod] = useState(\"\");\r\n\r\n  const shippingList = [\r\n    [\"Postnord\", \"postnord.webp\", \"Delivery within 3-4 weekdays\", 3],\r\n    [\"DHL\", \"dhl.png\", \"Delivery within 3-4 weekdays\", 3],\r\n    [\"Instabox\", \"instabox.png\", \"Delivery within 1-2 days\", 4],\r\n    [\"Budbee\", \"budbee.png\", \"Home delivery within 1-2 weekdays\", 5]\r\n  ];\r\n\r\n  const dispatch = useDispatch();\r\n  const updatePayment = (email, address, shippingMethod, paymentMethod, subtotal, shipping) => {\r\n    dispatch(actions.updatePayment([email, address, shippingMethod, paymentMethod, subtotal, shipping]));\r\n\r\n    return <Redirect to='/confirmation' />\r\n\r\n  }\r\n\r\n  // Go to cart if no price or payment info exist\r\n  if(subtotal === 0 || payment === null) {\r\n    return <Redirect to='/cart' />\r\n\r\n  }\r\n\r\n  function purchase() {\r\n    if(emailRegex.test(email) && phoneRegex.test(phone.replace(\" \", \"\")) && shipping !== 0){\r\n      // Card\r\n      if(paymentMethod == \"Card\") {\r\n        if(cardAmericanExpressRegex.test(cardNumber) ||\r\n        cardVisaRegex.test(cardNumber) ||\r\n        cardMasterCard.test(cardNumber) &&\r\n        setCardExpire.length > 0 &&\r\n        (cardCvc >= 100 && cardCvc <= 9999)){\r\n\r\n          updatePayment(email,\r\n\r\n                        [firstName + \" \" + lastName,\r\n                        street,\r\n                        streetOptional.length > 0 ? (streetOptional) : \"\",\r\n                        postalCode,\r\n                        city,\r\n                        country],\r\n\r\n                        shippingMethod, [paymentMethod, cardNumber.substring(12, 16)],\r\n                        subtotal, shipping);\r\n\r\n            localStorage.removeItem(\"cart\");\r\n\r\n        }\r\n\r\n    // PayPal\r\n    } else if(paymentMethod == \"PayPal\") {\r\n        if(emailRegex.test(paypalEmail)){\r\n          updatePayment(email,\r\n\r\n                        [firstName + \" \" + lastName,\r\n                        street,\r\n                        streetOptional.length > 0 ? (streetOptional) : \"\",\r\n                        postalCode,\r\n                        city,\r\n                        country],\r\n\r\n                        shippingMethod, [paymentMethod, paypalEmail],\r\n                        subtotal, shipping);\r\n\r\n            localStorage.removeItem(\"cart\");\r\n\r\n        }\r\n\r\n    // Swish\r\n    } else if(paymentMethod == \"Swish\") {\r\n        if(phoneRegex.test(swishNumber)){\r\n          updatePayment(email,\r\n\r\n                        [firstName + \" \" + lastName,\r\n                        street,\r\n                        streetOptional.length > 0 ? (streetOptional) : \"\",\r\n                        postalCode,\r\n                        city,\r\n                        country],\r\n\r\n                        shippingMethod, [paymentMethod, swishNumber],\r\n                        subtotal, shipping);\r\n\r\n            localStorage.removeItem(\"cart\");\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"Payment\">\r\n      <p className=\"Title\">Billing details</p>\r\n      <div className=\"BillingDetails\">\r\n        <input type=\"text\" placeholder=\"First name\" autocomplete=\"given-name\" value={firstName} onChange={i => { setFirstName(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"Last name\" autocomplete=\"family-name\" value={lastName} onChange={i => { setLastName(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"Email\" autocomplete=\"email\" value={email} onChange={i => { setEmail(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"Phone\" autocomplete=\"tel\" value={phone} onChange={i => { setPhone(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"Country\" autocomplete=\"country-name\" value={country} onChange={i => { setCountry(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"Street name and house number\" autocomplete=\"street-address\" value={street} onChange={i => { setStreet(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"Apartment, suite, unit, etc. (optional)\" value={streetOptional} onChange={i => { setStreetOptional(i.target.value) }} />\r\n        <input type=\"text\" placeholder=\"Postal code\" value={postalCode} onChange={i => { setPostalCode(i.target.value) }} required />\r\n        <input type=\"text\" placeholder=\"City\" value={city} onChange={i => { setCity(i.target.value) }} required />\r\n      </div>\r\n\r\n      <p className=\"Title\">Shipping</p>\r\n      {\r\n        shippingList.map(shipping =>\r\n          <div className=\"ShippingOption\">\r\n            <div className=\"ShippingTitle\">\r\n              <input type=\"radio\" name=\"shipping\" value={shipping[0]} onClick={ () => {\r\n                  setShipping(shipping[3]);\r\n                  setShippingMethod(shipping[0]);\r\n                }} />\r\n              <label for={shipping[0]}>\r\n                <img src={(process.env.PUBLIC_URL + \"/images/shipping/\" + shipping[1])} />\r\n                <p>+${shipping[3]}</p>\r\n              </label>\r\n            </div>\r\n            <p className=\"ShippingInfo\">{shipping[2]}</p>\r\n          </div>\r\n\r\n        )\r\n      }\r\n\r\n      <p className=\"Title\">Payment</p>\r\n      <div className=\"PaymentMethod\">\r\n        <div className=\"PaymentMethodTitle\">\r\n          <div>\r\n            <input type=\"radio\" name=\"payment\" value={paymentMethod} onClick={ () => setPaymentMethod(\"Card\") } />\r\n          </div>\r\n          <div>\r\n            <img src={(process.env.PUBLIC_URL + \"/images/payment/visa.jpg\")} />\r\n            <img src={(process.env.PUBLIC_URL + \"/images/payment/mastercard.png\")} />\r\n            <img src={(process.env.PUBLIC_URL + \"/images/payment/american-express.jpg\")} />\r\n          </div>\r\n        </div>\r\n        { paymentMethod === \"Card\" ?\r\n          <div className=\"PaymentMethodFields\">\r\n            <input type=\"text\" placeholder=\"Card number\" autocomplete=\"cc-number\" value={cardNumber} onChange={i => { setCardNumber(i.target.value) }} style={{\"margin-bottom\": \"1vmin\"}} required />\r\n            <input type=\"month\" autocomplete=\"cc-exp\" onChange={i => { setCardExpire(i.target.value) }} style={{\"margin-bottom\": \"1vmin\"}} required />\r\n            <input type=\"number\" placeholder=\"CVC/CVV\" min=\"0\" max=\"9999\" maxlength=\"4\" autocomplete=\"cc-csc\" value={cardCvc} onChange={i => { setCardCvc(i.target.value) }} required />\r\n          </div>\r\n          : null\r\n        }\r\n      </div>\r\n\r\n      <div className=\"PaymentMethod\">\r\n        <div className=\"PaymentMethodTitle\">\r\n          <div>\r\n            <input type=\"radio\" name=\"payment\" value={paymentMethod} onClick={ () => setPaymentMethod(\"PayPal\") } />\r\n          </div>\r\n          <div>\r\n            <img src={(process.env.PUBLIC_URL + \"/images/payment/paypal.png\")} />\r\n          </div>\r\n        </div>\r\n        { paymentMethod === \"PayPal\" ?\r\n          <div className=\"PaymentMethodFields\">\r\n            <input type=\"text\" placeholder=\"PayPal email\" autocomplete=\"email\" value={paypalEmail} onChange={i => { setPaypalEmail(i.target.value) }} required />\r\n          </div>\r\n          : null\r\n        }\r\n      </div>\r\n\r\n      <div className=\"PaymentMethod\">\r\n        <div className=\"PaymentMethodTitle\">\r\n          <div>\r\n            <input type=\"radio\" name=\"payment\" value={paymentMethod} onClick={ () => setPaymentMethod(\"Swish\") } />\r\n          </div>\r\n          <div>\r\n            <img src={(process.env.PUBLIC_URL + \"/images/payment/swish.svg\")} />\r\n          </div>\r\n        </div>\r\n        { paymentMethod === \"Swish\" ?\r\n          <div className=\"PaymentMethodFields\">\r\n            <input type=\"text\" placeholder=\"Swish number\" autocomplete=\"tel\" value={swishNumber} onChange={i => { setSwishNumber(i.target.value) }} required />\r\n          </div>\r\n          : null\r\n        }\r\n      </div>\r\n\r\n      <p className=\"Title\">To pay</p>\r\n      <p className=\"ToPay\">${(subtotal + shipping).toFixed(2)}</p>\r\n      { (emailRegex.test(email) && phoneRegex.test(phone.replace(\" \", \"\")) && shipping !== 0 &&\r\n        (paymentMethod == \"Card\" && cardAmericanExpressRegex.test(cardNumber) || cardVisaRegex.test(cardNumber) || cardMasterCard.test(cardNumber) && setCardExpire.length > 0 && (cardCvc >= 100 && cardCvc <= 9999)) ||\r\n        (paymentMethod == \"PayPal\" && emailRegex.test(paypalEmail)) ||\r\n        (paymentMethod == \"Swish\" && phoneRegex.test(swishNumber))) ?\r\n        <Link to=\"/confirmation\" className=\"PurchaseButton\" onClick={purchase}>Complete the purchase</Link> :\r\n        <button className=\"NotReadyPurchaseButton\">Complete the purchase</button>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Payment;\r\n","import \"./Confirmation.css\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction Confirmation() {\r\n  const payment = useSelector(state => state.cart.payment);\r\n\r\n  function generateID(length) {\r\n    var id = \"\";\r\n    var charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \"0123456789\";\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      id += charset.charAt(Math.floor(Math.random() * charset.length));\r\n\r\n    }\r\n    return id;\r\n\r\n  }\r\n\r\n  if(payment.length > 0){\r\n    return (\r\n      <div className=\"Confirmation\">\r\n        <main>\r\n          <img className=\"ConfirmationIcon\" src={(process.env.PUBLIC_URL + \"/images/confirmed.svg\")} alt=\"confirmed\"/>\r\n          <h1 className=\"ConfirmationTitle\">Order confirmed</h1>\r\n          <p className=\"ConfirmationID\">Order #{generateID(10)}</p>\r\n          <p className=\"ConfirmationText\">We will be sending you an email confirmation to <b>{payment[0]}</b> shortly.</p>\r\n\r\n          <hr />\r\n\r\n          <div>\r\n            <p className=\"ConfirmationInfoTitle\">Address</p>\r\n            <p className=\"ConfirmationInfoText\">{payment[1][0]}<br/>{payment[1][1]}<br/>{payment[1][2]}{payment[1][2] === \"\" ? <b></b> : <br></br>}{payment[1][3]}<br/>{payment[1][4]}<br/>{payment[1][5]}</p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"ConfirmationInfoTitle\">Shipping method</p>\r\n            <p className=\"ConfirmationInfoText\">{payment[2]}</p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"ConfirmationInfoTitle\">Payment method</p>\r\n            <p className=\"ConfirmationInfoText\">{payment[3][0]}<br/>{payment[3][1]}</p>\r\n          </div>\r\n\r\n          <br />\r\n\r\n          <div>\r\n            <p className=\"ConfirmationInfoTitle\">Subtotal</p>\r\n            <p className=\"ConfirmationInfoText\">${payment[4].toFixed(2)}</p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"ConfirmationInfoTitle\">Shipping</p>\r\n            <p className=\"ConfirmationInfoText\">${payment[5].toFixed(2)}</p>\r\n          </div>\r\n\r\n          <div>\r\n            <p className=\"ConfirmationInfoTitle\">Total</p>\r\n            <p className=\"ConfirmationInfoText\">${(payment[4] + payment[5]).toFixed(2)}</p>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    );\r\n\r\n  } else {\r\n    return <Redirect to=\"/cart\"/>\r\n\r\n  }\r\n};\r\n\r\nexport default Confirmation;\r\n","import React from 'react';\r\nimport './Favourite.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {Link} from 'react-router-dom';\r\nimport defaultImg from '../img/movielogo.jpg';\r\n\r\n\r\nfunction Favourites() {\r\n\r\n\r\n  const [favouriteList, setFavourite] = useState([]);\r\n\r\n\r\n  // Set state from local storage\r\n  useEffect(() => {\r\n    let localFavourite = localStorage.getItem(\"favourite\");\r\n    localFavourite = JSON.parse(localFavourite);\r\n\r\n    if (localFavourite) {\r\n      setFavourite(localFavourite);\r\n\r\n\r\n\r\n    }\r\n\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const removeFavourites = (id) => {\r\n    let newFavourite = [...favouriteList];\r\n\r\n    // Remove item from list\r\n    newFavourite = newFavourite.filter(item => item.id !== id);\r\n\r\n    // Save state & local storage\r\n    setFavourite(newFavourite);\r\n    let favouriteString = JSON.stringify(newFavourite);\r\n    localStorage.setItem('favourite', favouriteString);\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const [show,setShow]= useState(false)\r\n  const [edit,setEdit]= useState(false)\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"Container\">\r\n\r\n      <header className=\"SavedMovies\">\r\n        <h1>Favourites</h1>\r\n\r\n        <img className=\"EditButton\" src={show ? (process.env.PUBLIC_URL + \"/images/save.svg\") : (process.env.PUBLIC_URL + \"/images/edit.svg\")} onClick={()=>setShow(!show)}/>\r\n\r\n      </header>\r\n\r\n      <div className= \"RowItem\">\r\n        <div className=\"MovieItems\">\r\n          {favouriteList.map(product =>\r\n\r\n          <div className =\"MovieContainer\">\r\n            <Link style={{textDecoration: \"none\"}} to={`/MovieInfo/${product.id}`}>\r\n              <div className=\"MoviePoster\" >\r\n                { product.img !== \"https://image.tmdb.org/t/p/w500null\" ?\r\n                <div>\r\n                  <img src={product.img} alt={product.title} />\r\n                </div>\r\n                :\r\n                <div>\r\n                  <img src={defaultImg} alt={product.title} />\r\n                </div>\r\n                }\r\n\r\n                <p className=\"MovieTitle\">{product.title}</p>\r\n              </div>\r\n            </Link>\r\n\r\n            <div className=\"RemoveFavourites\">\r\n              { show ?\r\n                <img src={(process.env.PUBLIC_URL + \"/images/delete.svg\")} onClick={()=>removeFavourites(product.id)}/>\r\n                : null\r\n              }\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n        )}\r\n\r\n      </div>\r\n\r\n\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Favourites;\r\n","import firebase from \"firebase\";\r\nconst firebaseApp = firebase.initializeApp(\r\n    {\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\n    apiKey: \"AIzaSyAjIRBg6j-kTlaDtUK3t8gphrEdz0mTVTI\",\r\n    authDomain: \"movieshop-416b8.firebaseapp.com\",\r\n    projectId: \"movieshop-416b8\",\r\n    storageBucket: \"movieshop-416b8.appspot.com\",\r\n    messagingSenderId: \"167558452114\",\r\n    appId: \"1:167558452114:web:41e89ba165852727f2a74b\",\r\n    measurementId: \"G-BDL0KJDFF8\"\r\n  \r\n}\r\n);\r\n\r\nconst db = firebase.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db,auth,storage }","import React,{ useState,useEffect, Component } from 'react';\r\nimport { FaStar } from 'react-icons/fa';\r\nimport \"./StarRating.css\";\r\nimport {db} from '../../firebase';\r\n\r\nconst colors = {\r\n    orange : \"#f8d568\",\r\n    grey : \"#696969\"\r\n};\r\n\r\nconst ref = db.collection('movieinfo');\r\n\r\nfunction StarRating(props) {\r\n    const mId= props.movId;\r\n   console.log(\"movieId in starrating:\" + mId);\r\n  //  const [mId,setMovieId] = useState(\"\");\r\n    const [posts,setPosts] = useState([]);\r\n    const [userComment, setUserComment] = useState(\"\");\r\n    \r\n    //setMovieId(props.movId);\r\n\r\n    useEffect(() => {    \r\n        console.log(\"Props Content\" + mId);\r\n        fetchFiebaseData();\r\n    }, []);\r\n\r\n    const fetchFiebaseData = () => \r\n    {\r\n        console.log(\"Fetching Data\"+mId);\r\n        ref.where('movieId','==',mId).onSnapshot(snap => \r\n            {\r\n            let commentsLists = [];\r\n            snap.forEach(doc => {\r\n                commentsLists.push({ ...doc.data() });\r\n                //setPosts(postsLists);\r\n            });\r\n            setPosts(commentsLists);\r\n            console.log(\"Got from firestore:\" + commentsLists);\r\n            //setPosts(snap.docs.map(doc=>doc.data()))\r\n            //setPosts(commentsList);\r\n           console.log(\"setPosts value:\"+ setPosts.value);\r\n        })\r\n    }\r\n\r\n     const stars = Array(5).fill(0);\r\n     const selStars = Array(5).fill(0);\r\n\r\n     const [currentValue,setCurrentValue] = useState(0);\r\n     const [hoverValue,setHoverValue] = useState(undefined);\r\n\r\n     const handleClick = value => {\r\n         setCurrentValue(value);\r\n     };\r\n\r\n     const handleMouseOver = value => {\r\n         setHoverValue(value)\r\n     };\r\n\r\n     const handleMouseLeave = () => {\r\n         setHoverValue(undefined)\r\n     };\r\n\r\n     const saveComments = () =>{\r\n        //event.preventDefault();\r\n        //setPosts(event);\r\n        console.log(\"User comments submitted:\" + userComment);\r\n        console.log(\"star value\" + currentValue);\r\n\r\n        const newData = {\r\n            movieId: mId,\r\n            movieRating: +currentValue,\r\n            movieComments: userComment\r\n        };\r\n        //Add new ratings & comments to firebase\r\n        ref.add(newData)\r\n        .then(() => {\r\n         //   alert('Added ratings & Comments successfully');\r\n           console.log(\"Document successfully written!\");\r\n           setUserComment(\"\");\r\n           setCurrentValue(0);\r\n           fetchFiebaseData();\r\n           \r\n       })\r\n       .catch((error) => {\r\n           console.error(\"Error writing document: \", error);\r\n       });\r\n    };\r\n\r\n    const handleBlur = event => {\r\n        console.log('You finished typing:', setUserComment);\r\n    }\r\n     \r\n    return (\r\n        <div className=\"container\">  \r\n            <h2><u> Ratings and Comments</u> </h2>\r\n            <br/>\r\n            {\r\n                posts.map((vari) => {\r\n                        return(\r\n                        <div>\r\n                            {/* <p>{vari.movieRating + \" \"} */}\r\n\r\n                           <p> {selStars.map((_,index) => {\r\n                                return(\r\n                                <FaStar className=\"starSelected\"\r\n                                    key={index}\r\n                                    color = {(vari.movieRating) > index ? colors.orange : colors.grey}\r\n                                    />\r\n                                )})}\r\n                            <span>{\" \" + vari.movieComments}</span>\r\n                            </p>\r\n                            <hr className=\"lineBreak\"/>\r\n                        </div>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n            <br/>\r\n            <div className=\"star\"> \r\n                {stars.map((_,index) => {\r\n                    return(\r\n                        <FaStar className=\"ratingStar\"\r\n                            key={index}\r\n                            color = {(hoverValue || currentValue) > index ? colors.orange : colors.grey}\r\n                            onClick={() => handleClick(index+1)}\r\n                            onMouseOver={() => handleMouseOver(index+1)}\r\n                            onMouseLeave={handleMouseLeave}\r\n                        />\r\n                    )\r\n                })}\r\n                \r\n            </div>\r\n\r\n            <div className=\"comments\">\r\n                <textarea className=\"userComments\" placeholder=\"Write Comments\"  onBlur={handleBlur} value={userComment} onChange={(e)=>\r\n            setUserComment(e.target.value)}/>\r\n                <button className=\"submitBtn\" onClick = {saveComments}>Submit</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StarRating;","import React, { Component } from \"react\";\r\nimport './MovieInformation.css';\r\nimport { useState, useEffect } from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {FaStar} from \"react-icons/fa\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport StarRating from '../starrating/StarRating';\r\nimport defaultImg from '../../img/movielogo.jpg';\r\n\r\n\r\nconst POSTER_URL = \"https://image.tmdb.org/t/p/w500\"\r\nconst MOVIE_PRICE = 7.9\r\n\r\nclass MovieInformation extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            apiResponse:null,\r\n            cart:[],\r\n            favouriteList:[],\r\n            mov_id:\"\",\r\n            hours:0,\r\n            minutes:0\r\n        };\r\n}\r\n\r\n   async componentDidMount() {\r\n    const m_id = this.props.movId;\r\n    console.log(\"Movie Id from Info Page\"+ m_id);\r\n    const api_key=\"?api_key=3dbd54ecb77c41b970728ba04b569d4c\"\r\n    //const movie_url = \"https://api.themoviedb.org/3/movie/106646?api_key=3dbd54ecb77c41b970728ba04b569d4c\";\r\n    const url = \"https://api.themoviedb.org/3/movie/\";\r\n    const movie_url=url+m_id+api_key;\r\n    console.log(movie_url);\r\n    const response = await fetch(movie_url);\r\n    const data = await response.json();\r\n    this.setState({ apiResponse: data});\r\n\r\n    //Setting state for movId\r\n    this.setState({ mov_id: data.id});\r\n\r\n    //Cart\r\n    const localCart = localStorage.getItem(\"cart\");\r\n    if(localCart)\r\n    {\r\n        this.setState({cart:JSON.parse(localCart)});\r\n    }\r\n\r\n     //Favorite\r\n     const localFavourite = localStorage.getItem(\"favourite\");\r\n     if(localFavourite){\r\n         this.setState({favouriteList:JSON.parse(localFavourite)});\r\n     }\r\n  }\r\n\r\n\r\n//Add cart\r\n  addItem = (id,newItem) => {\r\n    let newCart = this.state.cart;\r\n    let existingItem = null;\r\n    console.log(\"Cart\"+ newCart);\r\n    if (newCart) { existingItem = newCart.find(item => item.id === id);}\r\n    // Add to quantity if items exist or add new item\r\n    if (existingItem)\r\n    {\r\n      existingItem.quantity += 1;\r\n    } else\r\n    {\r\n        console.log(\"New Cart\" + newItem.title);\r\n        newCart.push(newItem);\r\n    }\r\n    // Save state & local storage\r\n    this.setState({cart:newCart});\r\n    let stringCart = JSON.stringify(newCart);\r\n    localStorage.setItem(\"cart\", stringCart)\r\n  }\r\n\r\n  //Add Favorite\r\n   addFavourite = (id, newItem) => {\r\n    let newFavourite = this.state.favouriteList;\r\n    let existingItem = null;\r\n    console.log(\"Favorite:\"+newFavourite);\r\n    if(newFavourite) { existingItem = newFavourite.find(item => item.id === id);}\r\n     //Add to favorites if item doesn't exists\r\n    if (!existingItem) {\r\n        console.log(\"New Favourite:\" + newItem.title);\r\n        newFavourite.push(newItem);\r\n    }\r\n    this.setState({favouriteList:newFavourite});\r\n    let stringFavourite = JSON.stringify(newFavourite);\r\n    localStorage.setItem(\"favourite\", stringFavourite)\r\n  }\r\n\r\n    render(){\r\n\r\n        if (!this.state.apiResponse) {\r\n\r\n            return <div>didn't get a Data</div>;\r\n          }\r\n        return (\r\n        <div className=\"viewMovieDetails\">\r\n            <div className=\"poster_img\">\r\n                {/* <img src= { POSTER_URL + this.state.apiResponse.poster_path } alt=\"\"  /> */}\r\n                { this.state.apiResponse.poster_path !== null ?\r\n                      <img src={ POSTER_URL + this.state.apiResponse.poster_path } alt=\"\" />\r\n                    :\r\n                      <img src={ defaultImg } style = { {width:\"60%\",height:\"60%\",objectFit:\"contain\",paddingLeft:\"80px\",justifyContent:\"space-around\"}} alt=\"\" />\r\n                  }\r\n            </div>\r\n\r\n            <div className=\"movieBox\">\r\n                <div className=\"movieTitle\">\r\n                    <h2> {this.state.apiResponse.title} </h2>\r\n                    <span><b> ${(MOVIE_PRICE + (this.state.apiResponse.vote_average / 10)).toFixed(2)}</b> </span>\r\n                    <Link className=\"NaviationButton\" to=\"/favourites\">\r\n                        <img src={(process.env.PUBLIC_URL + \"/images/favourites.svg\")} className=\"favIcon\" onClick={ () => this.addFavourite(this.state.apiResponse.id, {id: this.state.apiResponse.id, title: this.state.apiResponse.title, img: POSTER_URL + this.state.apiResponse.poster_path}) }/></Link>\r\n\r\n                </div>\r\n                <div className=\"release_status\">({this.state.apiResponse.status})\r\n                    <span className=\"lang\">\r\n                        <b>{this.state.apiResponse.original_language}</b>\r\n                    </span>\r\n                </div>\r\n                <div className=\"ratings\">\r\n                    <p> <FaStar style={{color:\"yellow\"}}/>\r\n                    <span className=\"rating_value\">{this.state.apiResponse.vote_average} </span>\r\n                    <span className=\"vote_counts\">{this.state.apiResponse.vote_count.toLocaleString(\"en-US\")} votes</span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"runtime\">\r\n                    <p> <i> {Math.floor(this.state.apiResponse.runtime / 60)} hours {this.state.apiResponse.runtime % 60} minutes </i></p>\r\n\r\n                <div className=\"genres\">\r\n                    <p className=\"classGenres\" >  {\r\n                            this.state.apiResponse.genres.map((gen)=>\r\n                                gen.name\r\n                             ) +\" \"\r\n\r\n                        }    </p>\r\n\r\n                </div>\r\n                </div>\r\n\r\n                <div className=\"overview\">\r\n                    <h3><u>Overview</u></h3>\r\n                    <p>{this.state.apiResponse.overview} </p>\r\n\r\n                </div>\r\n\r\n                <section className=\"technicalInfo\">\r\n                        <input type=\"checkbox\" id=\"chk\" />\r\n                        <label className=\"chkBtn\" for=\"chk\"><u> Technical Information</u></label>\r\n\r\n                        <div className=\"technicalContent\">\r\n                        <div className=\"release-date\">\r\n                            <p> <b>Released Date:</b> {this.state.apiResponse.release_date}</p>\r\n                        </div>\r\n                        <div className=\"spoken-languages\">\r\n                            <p><b>Spoken Languages:</b> {this.state.apiResponse.spoken_languages.map((sp_lang)=> sp_lang.english_name) + \" \" }</p>\r\n                        </div>\r\n                        <div className=\"homepage\">\r\n                            <p> <a id=\"hmpage\" href = {this.state.apiResponse.homepage} target=\"_blank\">Visit Site</a></p>\r\n                        </div>\r\n                        <div className=\"production-companies\">\r\n                            <h4><u>Credits</u></h4>\r\n                            <h4><u>Production Companies:</u></h4>\r\n                            <p>{this.state.apiResponse.production_companies.map((prd_comp)=> prd_comp.name) + \" \"}</p>\r\n                        </div>\r\n                        <div className=\"revenue\">\r\n                            <p><b>Revenue:</b>{this.state.apiResponse.revenue.toLocaleString(\"en-US\")} USD</p>\r\n                        </div>\r\n                        <div className=\"budget\">\r\n                            <p><b>Budget:</b>{this.state.apiResponse.budget.toLocaleString(\"en-US\")} USD</p>\r\n                        </div>\r\n                        <div className=\"popularity\">\r\n                            <p><b>Popularity:</b>{this.state.apiResponse.popularity} </p>\r\n                        </div>\r\n                      </div>\r\n                </section>\r\n                <br/>\r\n                    <div className=\"addCart\">\r\n                            <Link to=\"/Cart\" className=\"cart\" onClick={ () => this.addItem(this.state.apiResponse.id, {id: this.state.apiResponse.id, title: this.state.apiResponse.title, img: POSTER_URL + this.state.apiResponse.poster_path, price: MOVIE_PRICE+this.state.apiResponse.vote_average, quantity: 1}) }> ADD TO CART </Link>\r\n                    </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default MovieInformation;\r\n","import React, { Component } from 'react'\r\nimport MovieInformation from './MovieInformation'\r\nimport StarRating from '../starrating/StarRating'; \r\n\r\nclass Moviedetail extends Component {\r\n    state ={\r\n        movie_id:\"\"\r\n    };\r\n\r\n    componentDidMount(){\r\n        const m_id = this.props.id;\r\n        this.setState({movie_id:m_id});\r\n        window.scrollTo(0,0);\r\n    }\r\n   \r\n    render() {\r\n        if (this.state.movie_id!=\"\") {\r\n            return (\r\n                <div className=\"movieDetailContainer\" >\r\n                    <MovieInformation movId = {this.state.movie_id}/>\r\n                    <StarRating movId = {this.state.movie_id}/>\r\n                </div>\r\n            )\r\n        }\r\n        else\r\n        {\r\n            return(\r\n                <div>\r\n                    <h1>Invalid Movie ID</h1>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Moviedetail\r\n","import './App.css';\r\nimport MovieList from './components/MovieList';\r\nimport { useSelector } from 'react-redux';\r\nimport NavigationBar from './components/NavigationBar';\r\nimport Jumbotron from './components/Jumbotron';\r\nimport Cart from './components/Cart';\r\nimport Payment from './components/Payment';\r\nimport Confirmation from './components/Confirmation';\r\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\r\nimport Favourite  from './components/Favourite';\r\nimport MovieInfo from './components/movieInfo/Moviedetail';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename=\"/\">\r\n      <div className=\"App\">\r\n        <main>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Jumbotron />\r\n            <div className=\"movie-list-container\" style={{position: \"absolute\", top: \"65vh\"}}>\r\n              <MovieList />\r\n            </div>\r\n          </Route>\r\n          <Route exact path=\"/cart\"> <Cart /> </Route>\r\n          <Route exact path=\"/payment\"> <Payment /> </Route>\r\n          <Route exact path=\"/confirmation\"> <Confirmation /> </Route>\r\n          <Route exact path= \"/favourites\"> <Favourite /> </Route>\r\n          <Route exact path=\"/MovieInfo/:id\" render={(props) => (\r\n                      <MovieInfo id={props.match.params.id}/>)}></Route>\r\n        </Switch>\r\n        </main>\r\n        <footer>\r\n          <NavigationBar />\r\n        </footer>\r\n        </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\r\nimport { reducer as movieListReducer, reducer } from './movieList';\r\nimport { reducer as cartReducer} from './cart';\r\nimport { reducer as jumbotronReducer} from './jumboLoader';\r\n\r\nconst rootReducer = combineReducers({\r\n    movieList: movieListReducer,\r\n    cart: cartReducer,\r\n    jumboLoader: jumbotronReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport rootReducer from './features/rootReducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport { Provider } from 'react-redux';\r\n\r\n//vår store\r\nconst store = configureStore({\r\n  //funktion som konfigurerar vår store \r\n  reducer : rootReducer\r\n});\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}